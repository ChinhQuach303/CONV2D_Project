-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity doConv is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_KERNEL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_KERNEL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_image_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_image_ce0 : OUT STD_LOGIC;
    input_image_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_image_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_image_ce0 : OUT STD_LOGIC;
    output_image_we0 : OUT STD_LOGIC;
    output_image_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_WVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_KERNEL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_KERNEL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_RREADY : IN STD_LOGIC;
    s_axi_KERNEL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_KERNEL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_KERNEL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_KERNEL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_KERNEL_BUS_BREADY : IN STD_LOGIC;
    s_axi_KERNEL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of doConv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "doConv,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.457000,HLS_SYN_LAT=65808,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=5,HLS_SYN_FF=1120,HLS_SYN_LUT=1356}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_ce0 : STD_LOGIC;
    signal kernel_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal idxpixel_reg_333 : STD_LOGIC_VECTOR (14 downto 0);
    signal valOutput_reg_344 : STD_LOGIC_VECTOR (15 downto 0);
    signal pixConvolved_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal lineBuff_val_0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_412 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond4_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal lineBuff_val_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state12_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond4_reg_961_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_990_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_load_reg_836 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal kernel_load_1_reg_846 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal kernel_load_2_reg_856 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kernel_load_3_reg_866 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal kernel_load_4_reg_876 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal kernel_load_5_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal kernel_load_6_reg_896 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal kernel_load_7_reg_906 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_2_fu_417_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_916 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_24_0_1_fu_420_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_0_1_reg_921 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_0_2_fu_423_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_0_2_reg_926 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_1_fu_426_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_1_reg_931 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_1_1_fu_429_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_1_1_reg_936 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_1_2_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_1_2_reg_941 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_2_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_2_reg_946 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_2_1_fu_438_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_2_1_reg_951 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_2_2_fu_441_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_2_2_reg_956 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond4_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_961_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal idxpixel_1_fu_451_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal idxpixel_1_reg_965 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_8_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_970 : STD_LOGIC_VECTOR (63 downto 0);
    signal lineBuff_val_1_addr_reg_980 : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuff_val_2_addr_reg_985 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_cond6_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_990_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_995 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxCol_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_fu_570_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state13_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal col_assign_1_0_2_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_1_0_2_reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_1_fu_604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_1_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_1_fu_611_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_1_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_val_0_0_fu_621_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_0_reg_1056 : STD_LOGIC_VECTOR (15 downto 0);
    signal lineBuff_val_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_1_reg_1066 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_fu_636_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_1_reg_1071 : STD_LOGIC_VECTOR (15 downto 0);
    signal lineBuff_val_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_1_reg_1081 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_2_reg_1086 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_3_reg_1096 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_fu_660_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_reg_1101 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_802_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_reg_1106 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_665_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_reg_1111 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_795_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp13_reg_1116 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_668_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_17_reg_1121 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_fu_678_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_reg_1126 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp9_fu_681_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp9_fu_681_p2 : signal is "no";
    signal tmp9_reg_1131 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_810_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp15_reg_1136 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_824_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp14_reg_1141 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_15_fu_691_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_reg_1146 : STD_LOGIC_VECTOR (14 downto 0);
    signal valOutput_2_fu_734_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_741_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal row_1_fu_751_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_1_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_21_cast_fu_765_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_cast_reg_1169 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_1_fu_775_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal lineBuff_val_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuff_val_0_ce0 : STD_LOGIC;
    signal lineBuff_val_0_we0 : STD_LOGIC;
    signal lineBuff_val_0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuff_val_0_ce1 : STD_LOGIC;
    signal lineBuff_val_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuff_val_1_ce0 : STD_LOGIC;
    signal lineBuff_val_1_we0 : STD_LOGIC;
    signal lineBuff_val_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuff_val_1_ce1 : STD_LOGIC;
    signal lineBuff_val_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuff_val_2_ce0 : STD_LOGIC;
    signal lineBuff_val_2_we0 : STD_LOGIC;
    signal lineBuff_val_2_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuff_val_2_ce1 : STD_LOGIC;
    signal ap_phi_mux_idxpixel_phi_fu_337_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_pixConvolved_phi_fu_360_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_phi_mux_idxRow_phi_fu_372_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_col_assign_phi_fu_383_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_390 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_reg_401 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_cast_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_11_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_0_1_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_0_2_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_467_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_cast_fu_471_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_463_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_479_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_490_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_506_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp3_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxRow_2_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_2_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_val_0_0_fu_621_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_0_fu_621_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_fu_636_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_fu_636_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_fu_651_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_fu_651_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_fu_660_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_fu_660_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_816_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_688_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp12_fu_696_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp12_fu_696_p2 : signal is "no";
    signal tmp_14_fu_700_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal valOutput_1_fu_704_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_714_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOutput_1_cast_fu_709_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_s_fu_722_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast_fu_730_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_757_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_cast_fu_781_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_785_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_795_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_795_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_802_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_802_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_802_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_810_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_810_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_816_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_816_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_824_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_824_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_795_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_802_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_810_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_816_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_824_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_0_0_fu_621_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_1_1_fu_636_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_1_fu_651_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_val_2_2_fu_660_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_334 : BOOLEAN;
    signal ap_condition_353 : BOOLEAN;

    component doConv_mac_muladdeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component doConv_mac_muladdfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component doConv_lineBuff_vbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component doConv_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component doConv_KERNEL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        kernel_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : IN STD_LOGIC;
        kernel_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    doConv_CTRL_BUS_s_axi_U : component doConv_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    doConv_KERNEL_BUS_s_axi_U : component doConv_KERNEL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_KERNEL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_KERNEL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_KERNEL_BUS_AWVALID,
        AWREADY => s_axi_KERNEL_BUS_AWREADY,
        AWADDR => s_axi_KERNEL_BUS_AWADDR,
        WVALID => s_axi_KERNEL_BUS_WVALID,
        WREADY => s_axi_KERNEL_BUS_WREADY,
        WDATA => s_axi_KERNEL_BUS_WDATA,
        WSTRB => s_axi_KERNEL_BUS_WSTRB,
        ARVALID => s_axi_KERNEL_BUS_ARVALID,
        ARREADY => s_axi_KERNEL_BUS_ARREADY,
        ARADDR => s_axi_KERNEL_BUS_ARADDR,
        RVALID => s_axi_KERNEL_BUS_RVALID,
        RREADY => s_axi_KERNEL_BUS_RREADY,
        RDATA => s_axi_KERNEL_BUS_RDATA,
        RRESP => s_axi_KERNEL_BUS_RRESP,
        BVALID => s_axi_KERNEL_BUS_BVALID,
        BREADY => s_axi_KERNEL_BUS_BREADY,
        BRESP => s_axi_KERNEL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        kernel_address0 => kernel_address0,
        kernel_ce0 => kernel_ce0,
        kernel_q0 => kernel_q0);

    lineBuff_val_0_U : component doConv_lineBuff_vbkb
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_0_address0,
        ce0 => lineBuff_val_0_ce0,
        we0 => lineBuff_val_0_we0,
        d0 => lineBuff_val_1_q0,
        q0 => lineBuff_val_0_q0,
        address1 => lineBuff_val_0_address1,
        ce1 => lineBuff_val_0_ce1,
        q1 => lineBuff_val_0_q1);

    lineBuff_val_1_U : component doConv_lineBuff_vbkb
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_1_address0,
        ce0 => lineBuff_val_1_ce0,
        we0 => lineBuff_val_1_we0,
        d0 => lineBuff_val_2_q0,
        q0 => lineBuff_val_1_q0,
        address1 => lineBuff_val_1_address1,
        ce1 => lineBuff_val_1_ce1,
        q1 => lineBuff_val_1_q1);

    lineBuff_val_2_U : component doConv_lineBuff_vbkb
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_2_address0,
        ce0 => lineBuff_val_2_ce0,
        we0 => lineBuff_val_2_we0,
        d0 => input_image_q0,
        q0 => lineBuff_val_2_q0,
        address1 => lineBuff_val_2_address1,
        ce1 => lineBuff_val_2_ce1,
        q1 => lineBuff_val_2_q1);

    doConv_mac_muladdeOg_U1 : component doConv_mac_muladdeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_795_p0,
        din1 => grp_fu_795_p1,
        din2 => window_val_0_0_reg_1056,
        dout => grp_fu_795_p3);

    doConv_mac_muladdeOg_U2 : component doConv_mac_muladdeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_802_p0,
        din1 => grp_fu_802_p1,
        din2 => grp_fu_802_p2,
        dout => grp_fu_802_p3);

    doConv_mac_muladdeOg_U3 : component doConv_mac_muladdeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_810_p0,
        din1 => grp_fu_810_p1,
        din2 => window_val_2_2_reg_1101,
        dout => grp_fu_810_p3);

    doConv_mac_muladdeOg_U4 : component doConv_mac_muladdeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_816_p0,
        din1 => grp_fu_816_p1,
        din2 => window_val_1_1_reg_1071,
        dout => grp_fu_816_p3);

    doConv_mac_muladdfYi_U5 : component doConv_mac_muladdfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_824_p0,
        din1 => grp_fu_824_p1,
        din2 => tmp15_reg_1136,
        dout => grp_fu_824_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_assign_reg_379 <= idxCol_1_reg_1051;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                col_assign_reg_379 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    col_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_fu_745_p2 = ap_const_lv1_0))) then 
                col_reg_401 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_fu_769_p2 = ap_const_lv1_0))) then 
                col_reg_401 <= col_1_fu_775_p2;
            end if; 
        end if;
    end process;

    idxRow_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                idxRow_reg_368 <= idxRow_1_reg_1006;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                idxRow_reg_368 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    idxpixel_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                idxpixel_reg_333 <= idxpixel_1_reg_965;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                idxpixel_reg_333 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    pixConvolved_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond4_reg_961_pp0_iter1_reg = ap_const_lv1_0))) then 
                pixConvolved_reg_356 <= pixConvolved_1_reg_1046;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                pixConvolved_reg_356 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_353)) then 
                    reg_412 <= lineBuff_val_0_q0;
                elsif ((ap_const_boolean_1 = ap_condition_334)) then 
                    reg_412 <= lineBuff_val_0_q1;
                end if;
            end if; 
        end if;
    end process;

    row_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_fu_769_p2 = ap_const_lv1_1))) then 
                row_reg_390 <= row_1_reg_1164;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                row_reg_390 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    valOutput_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond4_reg_961_pp0_iter2_reg = ap_const_lv1_0))) then 
                valOutput_reg_344 <= valOutput_2_fu_734_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                valOutput_reg_344 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (or_cond6_reg_990 = ap_const_lv1_1) and (exitcond4_reg_961 = ap_const_lv1_0))) then
                col_assign_1_0_2_reg_1021 <= col_assign_1_0_2_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond4_reg_961 <= exitcond4_fu_445_p2;
                exitcond4_reg_961_pp0_iter1_reg <= exitcond4_reg_961;
                exitcond4_reg_961_pp0_iter2_reg <= exitcond4_reg_961_pp0_iter1_reg;
                or_cond6_reg_990_pp0_iter1_reg <= or_cond6_reg_990;
                or_cond6_reg_990_pp0_iter2_reg <= or_cond6_reg_990_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4_reg_961 = ap_const_lv1_0))) then
                idxCol_1_reg_1051 <= idxCol_1_fu_611_p3;
                pixConvolved_1_reg_1046 <= pixConvolved_1_fu_604_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4_fu_445_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idxCol_reg_1001 <= idxCol_fu_558_p2;
                lineBuff_val_1_addr_reg_980 <= tmp_8_fu_457_p1(7 - 1 downto 0);
                lineBuff_val_2_addr_reg_985 <= tmp_8_fu_457_p1(7 - 1 downto 0);
                or_cond6_reg_990 <= or_cond6_fu_546_p2;
                tmp_3_reg_995 <= tmp_3_fu_552_p2;
                    tmp_8_reg_970(31 downto 0) <= tmp_8_fu_457_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4_fu_445_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idxRow_1_reg_1006 <= idxRow_1_fu_570_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idxpixel_1_reg_965 <= idxpixel_1_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                kernel_load_1_reg_846 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kernel_load_2_reg_856 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kernel_load_3_reg_866 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                kernel_load_4_reg_876 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                kernel_load_5_reg_886 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                kernel_load_6_reg_896 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                kernel_load_7_reg_906 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                kernel_load_reg_836 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond6_reg_990 = ap_const_lv1_1) and (exitcond4_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lineBuff_val_1_load_1_reg_1066 <= lineBuff_val_1_q1;
                lineBuff_val_2_load_1_reg_1081 <= lineBuff_val_2_q1;
                lineBuff_val_2_load_2_reg_1086 <= lineBuff_val_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_cond6_reg_990_pp0_iter1_reg = ap_const_lv1_1) and (exitcond4_reg_961_pp0_iter1_reg = ap_const_lv1_0))) then
                lineBuff_val_1_load_3_reg_1096 <= lineBuff_val_1_q1;
                tmp13_reg_1116 <= grp_fu_795_p3;
                tmp3_reg_1106 <= grp_fu_802_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                row_1_reg_1164 <= row_1_fu_751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond6_reg_990_pp0_iter1_reg = ap_const_lv1_1) and (exitcond4_reg_961_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp14_reg_1141 <= grp_fu_824_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (or_cond6_reg_990_pp0_iter1_reg = ap_const_lv1_1) and (exitcond4_reg_961_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp15_reg_1136 <= grp_fu_810_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (or_cond6_reg_990_pp0_iter1_reg = ap_const_lv1_1) and (exitcond4_reg_961_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp9_reg_1131 <= tmp9_fu_681_p2;
                tmp_12_reg_1126 <= tmp_12_fu_678_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_cond6_reg_990_pp0_iter1_reg = ap_const_lv1_1) and (exitcond4_reg_961_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_13_reg_1111 <= tmp_13_fu_665_p1;
                tmp_17_reg_1121 <= tmp_17_fu_668_p1;
                window_val_2_2_reg_1101 <= window_val_2_2_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond6_reg_990_pp0_iter1_reg = ap_const_lv1_1) and (exitcond4_reg_961_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_15_reg_1146 <= tmp_15_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_fu_745_p2 = ap_const_lv1_0))) then
                    tmp_21_cast_reg_1169(14 downto 7) <= tmp_21_cast_fu_765_p1(14 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_24_0_1_reg_921 <= tmp_24_0_1_fu_420_p1;
                tmp_24_0_2_reg_926 <= tmp_24_0_2_fu_423_p1;
                tmp_24_1_1_reg_936 <= tmp_24_1_1_fu_429_p1;
                tmp_24_1_2_reg_941 <= tmp_24_1_2_fu_432_p1;
                tmp_24_1_reg_931 <= tmp_24_1_fu_426_p1;
                tmp_24_2_1_reg_951 <= tmp_24_2_1_fu_438_p1;
                tmp_24_2_2_reg_956 <= tmp_24_2_2_fu_441_p1;
                tmp_24_2_reg_946 <= tmp_24_2_fu_435_p1;
                tmp_2_reg_916 <= tmp_2_fu_417_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_reg_1156 <= tmp_fu_741_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond6_reg_990 = ap_const_lv1_1) and (exitcond4_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_val_0_0_reg_1056 <= window_val_0_0_fu_621_p2;
                window_val_1_1_reg_1071 <= window_val_1_1_fu_636_p2;
            end if;
        end if;
    end process;
    tmp_8_reg_970(63 downto 32) <= "00000000000000000000000000000000";
    tmp_21_cast_reg_1169(6 downto 0) <= "0000000";
    tmp_21_cast_reg_1169(15) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, exitcond4_fu_445_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state20, exitcond1_fu_745_p2, ap_CS_fsm_state21, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, exitcond_fu_769_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4_fu_445_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond4_fu_445_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_fu_745_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_fu_769_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(14);
    ap_CS_fsm_state21 <= ap_CS_fsm(15);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_334_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, exitcond4_reg_961, or_cond6_reg_990)
    begin
                ap_condition_334 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond6_reg_990 = ap_const_lv1_1) and (exitcond4_reg_961 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_353_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, exitcond4_reg_961_pp0_iter1_reg, or_cond6_reg_990_pp0_iter1_reg)
    begin
                ap_condition_353 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_cond6_reg_990_pp0_iter1_reg = ap_const_lv1_1) and (exitcond4_reg_961_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state11_assign_proc : process(exitcond4_fu_445_p2)
    begin
        if ((exitcond4_fu_445_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state20, exitcond1_fu_745_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_fu_745_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_assign_phi_fu_383_p4_assign_proc : process(col_assign_reg_379, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond4_reg_961, idxCol_1_reg_1051, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4_reg_961 = ap_const_lv1_0))) then 
            ap_phi_mux_col_assign_phi_fu_383_p4 <= idxCol_1_reg_1051;
        else 
            ap_phi_mux_col_assign_phi_fu_383_p4 <= col_assign_reg_379;
        end if; 
    end process;


    ap_phi_mux_idxRow_phi_fu_372_p4_assign_proc : process(idxRow_reg_368, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond4_reg_961, idxRow_1_reg_1006, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4_reg_961 = ap_const_lv1_0))) then 
            ap_phi_mux_idxRow_phi_fu_372_p4 <= idxRow_1_reg_1006;
        else 
            ap_phi_mux_idxRow_phi_fu_372_p4 <= idxRow_reg_368;
        end if; 
    end process;


    ap_phi_mux_idxpixel_phi_fu_337_p4_assign_proc : process(idxpixel_reg_333, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond4_reg_961, idxpixel_1_reg_965, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4_reg_961 = ap_const_lv1_0))) then 
            ap_phi_mux_idxpixel_phi_fu_337_p4 <= idxpixel_1_reg_965;
        else 
            ap_phi_mux_idxpixel_phi_fu_337_p4 <= idxpixel_reg_333;
        end if; 
    end process;


    ap_phi_mux_pixConvolved_phi_fu_360_p4_assign_proc : process(pixConvolved_reg_356, ap_enable_reg_pp0_iter1, exitcond4_reg_961_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, pixConvolved_1_reg_1046, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond4_reg_961_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_pixConvolved_phi_fu_360_p4 <= pixConvolved_1_reg_1046;
        else 
            ap_phi_mux_pixConvolved_phi_fu_360_p4 <= pixConvolved_reg_356;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20, exitcond1_fu_745_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_fu_745_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_1_fu_775_p2 <= std_logic_vector(unsigned(col_reg_401) + unsigned(ap_const_lv8_1));
    col_assign_1_0_2_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(ap_phi_mux_pixConvolved_phi_fu_360_p4));
    exitcond1_fu_745_p2 <= "1" when (row_reg_390 = ap_const_lv8_80) else "0";
    exitcond4_fu_445_p2 <= "1" when (ap_phi_mux_idxpixel_phi_fu_337_p4 = ap_const_lv15_4000) else "0";
    exitcond_fu_769_p2 <= "1" when (col_reg_401 = ap_const_lv8_80) else "0";
    grp_fu_795_p0 <= tmp_24_0_1_reg_921(8 - 1 downto 0);
    grp_fu_795_p1 <= grp_fu_795_p10(8 - 1 downto 0);
    grp_fu_795_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_412),16));
    grp_fu_802_p0 <= tmp_24_2_reg_946(8 - 1 downto 0);
    grp_fu_802_p1 <= grp_fu_802_p10(8 - 1 downto 0);
    grp_fu_802_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_load_1_reg_1081),16));
    grp_fu_802_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_val_2_1_fu_651_p0) * signed('0' &window_val_2_1_fu_651_p1))), 16));
    grp_fu_810_p0 <= tmp_24_0_2_reg_926(8 - 1 downto 0);
    grp_fu_810_p1 <= grp_fu_810_p10(8 - 1 downto 0);
    grp_fu_810_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_412),16));
    grp_fu_816_p0 <= tmp_24_1_2_reg_941(8 - 1 downto 0);
    grp_fu_816_p1 <= grp_fu_816_p10(8 - 1 downto 0);
    grp_fu_816_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_1_load_3_reg_1096),16));
    grp_fu_824_p0 <= tmp_24_1_reg_931(8 - 1 downto 0);
    grp_fu_824_p1 <= grp_fu_824_p10(8 - 1 downto 0);
    grp_fu_824_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_1_load_1_reg_1066),16));
    icmp3_fu_516_p2 <= "1" when (signed(tmp_10_fu_506_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_fu_500_p2 <= "1" when (signed(tmp_9_fu_490_p4) > signed(ap_const_lv31_0)) else "0";
    idxCol_1_fu_611_p3 <= 
        idxCol_reg_1001 when (tmp_3_reg_995(0) = '1') else 
        ap_const_lv32_0;
    idxCol_fu_558_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_col_assign_phi_fu_383_p4));
    idxRow_1_fu_570_p3 <= 
        ap_phi_mux_idxRow_phi_fu_372_p4 when (tmp_3_fu_552_p2(0) = '1') else 
        idxRow_2_fu_564_p2;
    idxRow_2_fu_564_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_idxRow_phi_fu_372_p4));
    idxpixel_1_fu_451_p2 <= std_logic_vector(unsigned(ap_phi_mux_idxpixel_phi_fu_337_p4) + unsigned(ap_const_lv15_1));
    input_image_address0 <= tmp_15_cast_fu_485_p1(14 - 1 downto 0);

    input_image_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_image_ce0 <= ap_const_logic_1;
        else 
            input_image_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_8_reg_970, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage1, tmp_11_fu_578_p1, tmp_20_0_2_fu_626_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lineBuff_val_0_address0 <= tmp_20_0_2_fu_626_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lineBuff_val_0_address0 <= tmp_11_fu_578_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            lineBuff_val_0_address0 <= tmp_8_reg_970(7 - 1 downto 0);
        else 
            lineBuff_val_0_address0 <= "XXXXXXX";
        end if; 
    end process;

    lineBuff_val_0_address1 <= tmp_20_0_1_fu_591_p1(7 - 1 downto 0);

    lineBuff_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            lineBuff_val_0_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lineBuff_val_0_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_we0_assign_proc : process(exitcond4_reg_961, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond4_reg_961 = ap_const_lv1_0))) then 
            lineBuff_val_0_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_8_fu_457_p1, lineBuff_val_1_addr_reg_980, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage1, tmp_20_0_1_fu_591_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_1_address0 <= tmp_20_0_1_fu_591_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lineBuff_val_1_address0 <= lineBuff_val_1_addr_reg_980;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lineBuff_val_1_address0 <= tmp_8_fu_457_p1(7 - 1 downto 0);
            else 
                lineBuff_val_1_address0 <= "XXXXXXX";
            end if;
        else 
            lineBuff_val_1_address0 <= "XXXXXXX";
        end if; 
    end process;


    lineBuff_val_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, tmp_11_fu_578_p1, tmp_20_0_2_fu_626_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lineBuff_val_1_address1 <= tmp_20_0_2_fu_626_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lineBuff_val_1_address1 <= tmp_11_fu_578_p1(7 - 1 downto 0);
        else 
            lineBuff_val_1_address1 <= "XXXXXXX";
        end if; 
    end process;


    lineBuff_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            lineBuff_val_1_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            lineBuff_val_1_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_we0_assign_proc : process(exitcond4_reg_961, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond4_reg_961 = ap_const_lv1_0))) then 
            lineBuff_val_1_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_8_fu_457_p1, lineBuff_val_2_addr_reg_985, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage1, tmp_20_0_1_fu_591_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_2_address0 <= tmp_20_0_1_fu_591_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lineBuff_val_2_address0 <= lineBuff_val_2_addr_reg_985;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lineBuff_val_2_address0 <= tmp_8_fu_457_p1(7 - 1 downto 0);
            else 
                lineBuff_val_2_address0 <= "XXXXXXX";
            end if;
        else 
            lineBuff_val_2_address0 <= "XXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, tmp_11_fu_578_p1, tmp_20_0_2_fu_626_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lineBuff_val_2_address1 <= tmp_20_0_2_fu_626_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lineBuff_val_2_address1 <= tmp_11_fu_578_p1(7 - 1 downto 0);
        else 
            lineBuff_val_2_address1 <= "XXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            lineBuff_val_2_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            lineBuff_val_2_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_we0_assign_proc : process(exitcond4_reg_961, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond4_reg_961 = ap_const_lv1_0))) then 
            lineBuff_val_2_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond6_fu_546_p2 <= (tmp2_fu_540_p2 and tmp1_fu_534_p2);
    output_image_address0 <= tmp_22_cast_fu_790_p1(14 - 1 downto 0);

    output_image_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_image_ce0 <= ap_const_logic_1;
        else 
            output_image_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_image_d0 <= tmp_reg_1156;

    output_image_we0_assign_proc : process(ap_CS_fsm_state21, exitcond_fu_769_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_fu_769_p2 = ap_const_lv1_0))) then 
            output_image_we0 <= ap_const_logic_1;
        else 
            output_image_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_fu_722_p3),16));
    p_s_fu_722_p3 <= 
        ap_const_lv15_0 when (tmp_18_fu_714_p3(0) = '1') else 
        valOutput_1_cast_fu_709_p2;
    pixConvolved_1_fu_604_p3 <= 
        pixConvolved_2_fu_585_p2 when (tmp_3_reg_995(0) = '1') else 
        ap_const_lv32_0;
    pixConvolved_2_fu_585_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_pixConvolved_phi_fu_360_p4));
    row_1_fu_751_p2 <= std_logic_vector(unsigned(row_reg_390) + unsigned(ap_const_lv8_1));
    tmp12_fu_696_p2 <= std_logic_vector(signed(tmp13_reg_1116) + signed(tmp14_reg_1141));
    tmp1_fu_534_p2 <= (icmp_fu_500_p2 and icmp3_fu_516_p2);
    tmp2_fu_540_p2 <= (tmp_7_fu_528_p2 and tmp_6_fu_522_p2);
    tmp9_fu_681_p2 <= std_logic_vector(signed(tmp3_reg_1106) + signed(grp_fu_816_p3));
    tmp_10_cast_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_401),16));
    tmp_10_fu_506_p4 <= ap_phi_mux_col_assign_phi_fu_383_p4(31 downto 1);
    tmp_11_cast_fu_471_p3 <= (tmp_5_fu_467_p1 & ap_const_lv7_0);
    tmp_11_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_pixConvolved_phi_fu_360_p4),64));
    tmp_12_fu_678_p1 <= grp_fu_816_p3(15 - 1 downto 0);
    tmp_13_fu_665_p1 <= grp_fu_802_p3(15 - 1 downto 0);
    tmp_14_fu_700_p2 <= std_logic_vector(unsigned(tmp_12_reg_1126) + unsigned(tmp_13_reg_1111));
        tmp_15_cast_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_479_p2),64));

    tmp_15_fu_691_p2 <= std_logic_vector(unsigned(tmp_16_fu_688_p1) + unsigned(tmp_17_reg_1121));
    tmp_16_fu_688_p1 <= grp_fu_824_p3(15 - 1 downto 0);
    tmp_17_fu_668_p1 <= grp_fu_795_p3(15 - 1 downto 0);
    tmp_18_fu_714_p3 <= valOutput_1_fu_704_p2(15 downto 15);
    tmp_19_fu_757_p3 <= (row_reg_390 & ap_const_lv7_0);
    tmp_20_0_1_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixConvolved_2_fu_585_p2),64));
    tmp_20_0_2_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_1_0_2_reg_1021),64));
    tmp_20_fu_785_p2 <= std_logic_vector(unsigned(tmp_21_cast_reg_1169) + unsigned(tmp_10_cast_fu_781_p1));
    tmp_21_cast_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_757_p3),16));
    tmp_22_cast_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_785_p2),64));
        tmp_24_0_1_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_1_reg_846),16));

        tmp_24_0_2_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_2_reg_856),16));

        tmp_24_1_1_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_4_reg_876),16));

        tmp_24_1_2_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_5_reg_886),16));

        tmp_24_1_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_3_reg_866),16));

        tmp_24_2_1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_7_reg_906),16));

        tmp_24_2_2_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_q0),16));

        tmp_24_2_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_6_reg_896),16));

        tmp_2_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_reg_836),16));

    tmp_3_fu_552_p2 <= "1" when (signed(ap_phi_mux_col_assign_phi_fu_383_p4) < signed(ap_const_lv32_7F)) else "0";
    tmp_4_fu_463_p1 <= ap_phi_mux_col_assign_phi_fu_383_p4(16 - 1 downto 0);
    tmp_5_fu_467_p1 <= ap_phi_mux_idxRow_phi_fu_372_p4(9 - 1 downto 0);
    tmp_6_fu_522_p2 <= "1" when (signed(ap_phi_mux_col_assign_phi_fu_383_p4) < signed(ap_const_lv32_7E)) else "0";
    tmp_7_fu_528_p2 <= "1" when (signed(ap_phi_mux_idxRow_phi_fu_372_p4) < signed(ap_const_lv32_7E)) else "0";
    tmp_8_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_col_assign_phi_fu_383_p4),64));
    tmp_9_fu_490_p4 <= ap_phi_mux_idxRow_phi_fu_372_p4(31 downto 1);
    tmp_fu_741_p1 <= valOutput_reg_344(8 - 1 downto 0);
    tmp_s_fu_479_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_471_p3) + unsigned(tmp_4_fu_463_p1));
    valOutput_1_cast_fu_709_p2 <= std_logic_vector(unsigned(tmp_15_reg_1146) + unsigned(tmp_14_fu_700_p2));
    valOutput_1_fu_704_p2 <= std_logic_vector(unsigned(tmp9_reg_1131) + unsigned(tmp12_fu_696_p2));
    valOutput_2_fu_734_p3 <= 
        p_cast_fu_730_p1 when (or_cond6_reg_990_pp0_iter2_reg(0) = '1') else 
        valOutput_reg_344;
    window_val_0_0_fu_621_p0 <= tmp_2_reg_916(8 - 1 downto 0);
    window_val_0_0_fu_621_p1 <= window_val_0_0_fu_621_p10(8 - 1 downto 0);
    window_val_0_0_fu_621_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_0_q0),16));
    window_val_0_0_fu_621_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_val_0_0_fu_621_p0) * signed('0' &window_val_0_0_fu_621_p1))), 16));
    window_val_1_1_fu_636_p0 <= tmp_24_1_1_reg_936(8 - 1 downto 0);
    window_val_1_1_fu_636_p1 <= window_val_1_1_fu_636_p10(8 - 1 downto 0);
    window_val_1_1_fu_636_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_1_q0),16));
    window_val_1_1_fu_636_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_val_1_1_fu_636_p0) * signed('0' &window_val_1_1_fu_636_p1))), 16));
    window_val_2_1_fu_651_p0 <= tmp_24_2_1_reg_951(8 - 1 downto 0);
    window_val_2_1_fu_651_p1 <= window_val_2_1_fu_651_p10(8 - 1 downto 0);
    window_val_2_1_fu_651_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_load_2_reg_1086),16));
    window_val_2_2_fu_660_p0 <= tmp_24_2_2_reg_956(8 - 1 downto 0);
    window_val_2_2_fu_660_p1 <= window_val_2_2_fu_660_p10(8 - 1 downto 0);
    window_val_2_2_fu_660_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_q1),16));
    window_val_2_2_fu_660_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_val_2_2_fu_660_p0) * signed('0' &window_val_2_2_fu_660_p1))), 16));
end behav;
