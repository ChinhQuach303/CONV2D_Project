// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doConv,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.457000,HLS_SYN_LAT=65808,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=5,HLS_SYN_FF=1120,HLS_SYN_LUT=1356}" *)

module doConv (
        ap_clk,
        ap_rst_n,
        input_image_address0,
        input_image_ce0,
        input_image_q0,
        output_image_address0,
        output_image_ce0,
        output_image_we0,
        output_image_d0,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt,
        s_axi_KERNEL_BUS_AWVALID,
        s_axi_KERNEL_BUS_AWREADY,
        s_axi_KERNEL_BUS_AWADDR,
        s_axi_KERNEL_BUS_WVALID,
        s_axi_KERNEL_BUS_WREADY,
        s_axi_KERNEL_BUS_WDATA,
        s_axi_KERNEL_BUS_WSTRB,
        s_axi_KERNEL_BUS_ARVALID,
        s_axi_KERNEL_BUS_ARREADY,
        s_axi_KERNEL_BUS_ARADDR,
        s_axi_KERNEL_BUS_RVALID,
        s_axi_KERNEL_BUS_RREADY,
        s_axi_KERNEL_BUS_RDATA,
        s_axi_KERNEL_BUS_RRESP,
        s_axi_KERNEL_BUS_BVALID,
        s_axi_KERNEL_BUS_BREADY,
        s_axi_KERNEL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_pp0_stage0 = 16'd1024;
parameter    ap_ST_fsm_pp0_stage1 = 16'd2048;
parameter    ap_ST_fsm_pp0_stage2 = 16'd4096;
parameter    ap_ST_fsm_state19 = 16'd8192;
parameter    ap_ST_fsm_state20 = 16'd16384;
parameter    ap_ST_fsm_state21 = 16'd32768;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_KERNEL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_KERNEL_BUS_ADDR_WIDTH = 5;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_KERNEL_BUS_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [13:0] input_image_address0;
output   input_image_ce0;
input  [7:0] input_image_q0;
output  [13:0] output_image_address0;
output   output_image_ce0;
output   output_image_we0;
output  [7:0] output_image_d0;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;
input   s_axi_KERNEL_BUS_AWVALID;
output   s_axi_KERNEL_BUS_AWREADY;
input  [C_S_AXI_KERNEL_BUS_ADDR_WIDTH - 1:0] s_axi_KERNEL_BUS_AWADDR;
input   s_axi_KERNEL_BUS_WVALID;
output   s_axi_KERNEL_BUS_WREADY;
input  [C_S_AXI_KERNEL_BUS_DATA_WIDTH - 1:0] s_axi_KERNEL_BUS_WDATA;
input  [C_S_AXI_KERNEL_BUS_WSTRB_WIDTH - 1:0] s_axi_KERNEL_BUS_WSTRB;
input   s_axi_KERNEL_BUS_ARVALID;
output   s_axi_KERNEL_BUS_ARREADY;
input  [C_S_AXI_KERNEL_BUS_ADDR_WIDTH - 1:0] s_axi_KERNEL_BUS_ARADDR;
output   s_axi_KERNEL_BUS_RVALID;
input   s_axi_KERNEL_BUS_RREADY;
output  [C_S_AXI_KERNEL_BUS_DATA_WIDTH - 1:0] s_axi_KERNEL_BUS_RDATA;
output  [1:0] s_axi_KERNEL_BUS_RRESP;
output   s_axi_KERNEL_BUS_BVALID;
input   s_axi_KERNEL_BUS_BREADY;
output  [1:0] s_axi_KERNEL_BUS_BRESP;

reg input_image_ce0;
reg output_image_ce0;
reg output_image_we0;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [3:0] kernel_address0;
reg    kernel_ce0;
wire   [7:0] kernel_q0;
reg   [14:0] idxpixel_reg_333;
reg   [15:0] valOutput_reg_344;
reg   [31:0] pixConvolved_reg_356;
reg   [31:0] idxRow_reg_368;
reg   [31:0] col_assign_reg_379;
wire   [7:0] lineBuff_val_0_q1;
reg   [7:0] reg_412;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state11_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_state17_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond4_reg_961;
reg   [0:0] or_cond6_reg_990;
wire   [7:0] lineBuff_val_0_q0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state12_pp0_stage1_iter0;
wire    ap_block_state15_pp0_stage1_iter1;
wire    ap_block_state18_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] exitcond4_reg_961_pp0_iter1_reg;
reg   [0:0] or_cond6_reg_990_pp0_iter1_reg;
reg   [7:0] kernel_load_reg_836;
wire    ap_CS_fsm_state2;
reg   [7:0] kernel_load_1_reg_846;
wire    ap_CS_fsm_state3;
reg   [7:0] kernel_load_2_reg_856;
wire    ap_CS_fsm_state4;
reg   [7:0] kernel_load_3_reg_866;
wire    ap_CS_fsm_state5;
reg   [7:0] kernel_load_4_reg_876;
wire    ap_CS_fsm_state6;
reg   [7:0] kernel_load_5_reg_886;
wire    ap_CS_fsm_state7;
reg   [7:0] kernel_load_6_reg_896;
wire    ap_CS_fsm_state8;
reg   [7:0] kernel_load_7_reg_906;
wire    ap_CS_fsm_state9;
wire  signed [15:0] tmp_2_fu_417_p1;
reg  signed [15:0] tmp_2_reg_916;
wire    ap_CS_fsm_state10;
wire  signed [15:0] tmp_24_0_1_fu_420_p1;
reg  signed [15:0] tmp_24_0_1_reg_921;
wire  signed [15:0] tmp_24_0_2_fu_423_p1;
reg  signed [15:0] tmp_24_0_2_reg_926;
wire  signed [15:0] tmp_24_1_fu_426_p1;
reg  signed [15:0] tmp_24_1_reg_931;
wire  signed [15:0] tmp_24_1_1_fu_429_p1;
reg  signed [15:0] tmp_24_1_1_reg_936;
wire  signed [15:0] tmp_24_1_2_fu_432_p1;
reg  signed [15:0] tmp_24_1_2_reg_941;
wire  signed [15:0] tmp_24_2_fu_435_p1;
reg  signed [15:0] tmp_24_2_reg_946;
wire  signed [15:0] tmp_24_2_1_fu_438_p1;
reg  signed [15:0] tmp_24_2_1_reg_951;
wire  signed [15:0] tmp_24_2_2_fu_441_p1;
reg  signed [15:0] tmp_24_2_2_reg_956;
wire   [0:0] exitcond4_fu_445_p2;
reg   [0:0] exitcond4_reg_961_pp0_iter2_reg;
wire   [14:0] idxpixel_1_fu_451_p2;
reg   [14:0] idxpixel_1_reg_965;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_8_fu_457_p1;
reg   [63:0] tmp_8_reg_970;
reg   [6:0] lineBuff_val_1_addr_reg_980;
reg   [6:0] lineBuff_val_2_addr_reg_985;
wire   [0:0] or_cond6_fu_546_p2;
reg   [0:0] or_cond6_reg_990_pp0_iter2_reg;
wire   [0:0] tmp_3_fu_552_p2;
reg   [0:0] tmp_3_reg_995;
wire   [31:0] idxCol_fu_558_p2;
reg   [31:0] idxCol_reg_1001;
wire   [31:0] idxRow_1_fu_570_p3;
reg   [31:0] idxRow_1_reg_1006;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state13_pp0_stage2_iter0;
wire    ap_block_state16_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] col_assign_1_0_2_fu_598_p2;
reg   [31:0] col_assign_1_0_2_reg_1021;
wire   [31:0] pixConvolved_1_fu_604_p3;
reg   [31:0] pixConvolved_1_reg_1046;
wire   [31:0] idxCol_1_fu_611_p3;
reg   [31:0] idxCol_1_reg_1051;
wire   [15:0] window_val_0_0_fu_621_p2;
reg   [15:0] window_val_0_0_reg_1056;
wire   [7:0] lineBuff_val_1_q1;
reg   [7:0] lineBuff_val_1_load_1_reg_1066;
wire   [15:0] window_val_1_1_fu_636_p2;
reg   [15:0] window_val_1_1_reg_1071;
wire   [7:0] lineBuff_val_2_q1;
reg   [7:0] lineBuff_val_2_load_1_reg_1081;
wire   [7:0] lineBuff_val_2_q0;
reg   [7:0] lineBuff_val_2_load_2_reg_1086;
reg   [7:0] lineBuff_val_1_load_3_reg_1096;
wire   [15:0] window_val_2_2_fu_660_p2;
reg   [15:0] window_val_2_2_reg_1101;
wire  signed [15:0] grp_fu_802_p3;
reg  signed [15:0] tmp3_reg_1106;
wire   [14:0] tmp_13_fu_665_p1;
reg   [14:0] tmp_13_reg_1111;
wire  signed [15:0] grp_fu_795_p3;
reg  signed [15:0] tmp13_reg_1116;
wire   [14:0] tmp_17_fu_668_p1;
reg   [14:0] tmp_17_reg_1121;
wire   [14:0] tmp_12_fu_678_p1;
reg   [14:0] tmp_12_reg_1126;
(* use_dsp48 = "no" *) wire   [15:0] tmp9_fu_681_p2;
reg   [15:0] tmp9_reg_1131;
wire  signed [15:0] grp_fu_810_p3;
reg  signed [15:0] tmp15_reg_1136;
wire  signed [15:0] grp_fu_824_p3;
reg  signed [15:0] tmp14_reg_1141;
reg    ap_enable_reg_pp0_iter2;
wire   [14:0] tmp_15_fu_691_p2;
reg   [14:0] tmp_15_reg_1146;
wire   [15:0] valOutput_2_fu_734_p3;
wire   [7:0] tmp_fu_741_p1;
reg   [7:0] tmp_reg_1156;
wire    ap_CS_fsm_state19;
wire   [7:0] row_1_fu_751_p2;
reg   [7:0] row_1_reg_1164;
wire    ap_CS_fsm_state20;
wire   [15:0] tmp_21_cast_fu_765_p1;
reg   [15:0] tmp_21_cast_reg_1169;
wire   [0:0] exitcond1_fu_745_p2;
wire   [7:0] col_1_fu_775_p2;
wire    ap_CS_fsm_state21;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state11;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [6:0] lineBuff_val_0_address0;
reg    lineBuff_val_0_ce0;
reg    lineBuff_val_0_we0;
wire   [6:0] lineBuff_val_0_address1;
reg    lineBuff_val_0_ce1;
reg   [6:0] lineBuff_val_1_address0;
reg    lineBuff_val_1_ce0;
reg    lineBuff_val_1_we0;
wire   [7:0] lineBuff_val_1_q0;
reg   [6:0] lineBuff_val_1_address1;
reg    lineBuff_val_1_ce1;
reg   [6:0] lineBuff_val_2_address0;
reg    lineBuff_val_2_ce0;
reg    lineBuff_val_2_we0;
reg   [6:0] lineBuff_val_2_address1;
reg    lineBuff_val_2_ce1;
reg   [14:0] ap_phi_mux_idxpixel_phi_fu_337_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_pixConvolved_phi_fu_360_p4;
wire    ap_block_pp0_stage2;
reg   [31:0] ap_phi_mux_idxRow_phi_fu_372_p4;
reg   [31:0] ap_phi_mux_col_assign_phi_fu_383_p4;
reg   [7:0] row_reg_390;
wire   [0:0] exitcond_fu_769_p2;
reg   [7:0] col_reg_401;
wire  signed [63:0] tmp_15_cast_fu_485_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_11_fu_578_p1;
wire   [63:0] tmp_20_0_1_fu_591_p1;
wire   [63:0] tmp_20_0_2_fu_626_p1;
wire   [63:0] tmp_22_cast_fu_790_p1;
wire   [8:0] tmp_5_fu_467_p1;
wire   [15:0] tmp_11_cast_fu_471_p3;
wire   [15:0] tmp_4_fu_463_p1;
wire   [15:0] tmp_s_fu_479_p2;
wire   [30:0] tmp_9_fu_490_p4;
wire   [30:0] tmp_10_fu_506_p4;
wire   [0:0] icmp_fu_500_p2;
wire   [0:0] icmp3_fu_516_p2;
wire   [0:0] tmp_6_fu_522_p2;
wire   [0:0] tmp_7_fu_528_p2;
wire   [0:0] tmp2_fu_540_p2;
wire   [0:0] tmp1_fu_534_p2;
wire   [31:0] idxRow_2_fu_564_p2;
wire   [31:0] pixConvolved_2_fu_585_p2;
wire  signed [7:0] window_val_0_0_fu_621_p0;
wire   [7:0] window_val_0_0_fu_621_p1;
wire  signed [7:0] window_val_1_1_fu_636_p0;
wire   [7:0] window_val_1_1_fu_636_p1;
wire  signed [7:0] window_val_2_1_fu_651_p0;
wire   [7:0] window_val_2_1_fu_651_p1;
wire  signed [7:0] window_val_2_2_fu_660_p0;
wire   [7:0] window_val_2_2_fu_660_p1;
wire  signed [15:0] grp_fu_816_p3;
wire   [14:0] tmp_16_fu_688_p1;
(* use_dsp48 = "no" *) wire   [15:0] tmp12_fu_696_p2;
wire   [14:0] tmp_14_fu_700_p2;
wire   [15:0] valOutput_1_fu_704_p2;
wire   [0:0] tmp_18_fu_714_p3;
wire   [14:0] valOutput_1_cast_fu_709_p2;
wire   [14:0] p_s_fu_722_p3;
wire   [15:0] p_cast_fu_730_p1;
wire   [14:0] tmp_19_fu_757_p3;
wire   [15:0] tmp_10_cast_fu_781_p1;
wire   [15:0] tmp_20_fu_785_p2;
wire  signed [7:0] grp_fu_795_p0;
wire   [7:0] grp_fu_795_p1;
wire  signed [7:0] grp_fu_802_p0;
wire   [7:0] grp_fu_802_p1;
wire   [15:0] grp_fu_802_p2;
wire  signed [7:0] grp_fu_810_p0;
wire   [7:0] grp_fu_810_p1;
wire  signed [7:0] grp_fu_816_p0;
wire   [7:0] grp_fu_816_p1;
wire  signed [7:0] grp_fu_824_p0;
wire   [7:0] grp_fu_824_p1;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] grp_fu_795_p10;
wire   [15:0] grp_fu_802_p10;
wire   [15:0] grp_fu_810_p10;
wire   [15:0] grp_fu_816_p10;
wire   [15:0] grp_fu_824_p10;
wire   [15:0] window_val_0_0_fu_621_p10;
wire   [15:0] window_val_1_1_fu_636_p10;
wire   [15:0] window_val_2_1_fu_651_p10;
wire   [15:0] window_val_2_2_fu_660_p10;
reg    ap_condition_334;
reg    ap_condition_353;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

doConv_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
doConv_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

doConv_KERNEL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_KERNEL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_KERNEL_BUS_DATA_WIDTH ))
doConv_KERNEL_BUS_s_axi_U(
    .AWVALID(s_axi_KERNEL_BUS_AWVALID),
    .AWREADY(s_axi_KERNEL_BUS_AWREADY),
    .AWADDR(s_axi_KERNEL_BUS_AWADDR),
    .WVALID(s_axi_KERNEL_BUS_WVALID),
    .WREADY(s_axi_KERNEL_BUS_WREADY),
    .WDATA(s_axi_KERNEL_BUS_WDATA),
    .WSTRB(s_axi_KERNEL_BUS_WSTRB),
    .ARVALID(s_axi_KERNEL_BUS_ARVALID),
    .ARREADY(s_axi_KERNEL_BUS_ARREADY),
    .ARADDR(s_axi_KERNEL_BUS_ARADDR),
    .RVALID(s_axi_KERNEL_BUS_RVALID),
    .RREADY(s_axi_KERNEL_BUS_RREADY),
    .RDATA(s_axi_KERNEL_BUS_RDATA),
    .RRESP(s_axi_KERNEL_BUS_RRESP),
    .BVALID(s_axi_KERNEL_BUS_BVALID),
    .BREADY(s_axi_KERNEL_BUS_BREADY),
    .BRESP(s_axi_KERNEL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .kernel_address0(kernel_address0),
    .kernel_ce0(kernel_ce0),
    .kernel_q0(kernel_q0)
);

doConv_lineBuff_vbkb #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
lineBuff_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_0_address0),
    .ce0(lineBuff_val_0_ce0),
    .we0(lineBuff_val_0_we0),
    .d0(lineBuff_val_1_q0),
    .q0(lineBuff_val_0_q0),
    .address1(lineBuff_val_0_address1),
    .ce1(lineBuff_val_0_ce1),
    .q1(lineBuff_val_0_q1)
);

doConv_lineBuff_vbkb #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
lineBuff_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_1_address0),
    .ce0(lineBuff_val_1_ce0),
    .we0(lineBuff_val_1_we0),
    .d0(lineBuff_val_2_q0),
    .q0(lineBuff_val_1_q0),
    .address1(lineBuff_val_1_address1),
    .ce1(lineBuff_val_1_ce1),
    .q1(lineBuff_val_1_q1)
);

doConv_lineBuff_vbkb #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
lineBuff_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_2_address0),
    .ce0(lineBuff_val_2_ce0),
    .we0(lineBuff_val_2_we0),
    .d0(input_image_q0),
    .q0(lineBuff_val_2_q0),
    .address1(lineBuff_val_2_address1),
    .ce1(lineBuff_val_2_ce1),
    .q1(lineBuff_val_2_q1)
);

doConv_mac_muladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
doConv_mac_muladdeOg_U1(
    .din0(grp_fu_795_p0),
    .din1(grp_fu_795_p1),
    .din2(window_val_0_0_reg_1056),
    .dout(grp_fu_795_p3)
);

doConv_mac_muladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
doConv_mac_muladdeOg_U2(
    .din0(grp_fu_802_p0),
    .din1(grp_fu_802_p1),
    .din2(grp_fu_802_p2),
    .dout(grp_fu_802_p3)
);

doConv_mac_muladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
doConv_mac_muladdeOg_U3(
    .din0(grp_fu_810_p0),
    .din1(grp_fu_810_p1),
    .din2(window_val_2_2_reg_1101),
    .dout(grp_fu_810_p3)
);

doConv_mac_muladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
doConv_mac_muladdeOg_U4(
    .din0(grp_fu_816_p0),
    .din1(grp_fu_816_p1),
    .din2(window_val_1_1_reg_1071),
    .dout(grp_fu_816_p3)
);

doConv_mac_muladdfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
doConv_mac_muladdfYi_U5(
    .din0(grp_fu_824_p0),
    .din1(grp_fu_824_p1),
    .din2(tmp15_reg_1136),
    .dout(grp_fu_824_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state11)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4_reg_961 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_reg_379 <= idxCol_1_reg_1051;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        col_assign_reg_379 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond1_fu_745_p2 == 1'd0))) begin
        col_reg_401 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state21) & (exitcond_fu_769_p2 == 1'd0))) begin
        col_reg_401 <= col_1_fu_775_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4_reg_961 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxRow_reg_368 <= idxRow_1_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        idxRow_reg_368 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4_reg_961 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxpixel_reg_333 <= idxpixel_1_reg_965;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        idxpixel_reg_333 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond4_reg_961_pp0_iter1_reg == 1'd0))) begin
        pixConvolved_reg_356 <= pixConvolved_1_reg_1046;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        pixConvolved_reg_356 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_353)) begin
            reg_412 <= lineBuff_val_0_q0;
        end else if ((1'b1 == ap_condition_334)) begin
            reg_412 <= lineBuff_val_0_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond_fu_769_p2 == 1'd1))) begin
        row_reg_390 <= row_1_reg_1164;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        row_reg_390 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond4_reg_961_pp0_iter2_reg == 1'd0))) begin
        valOutput_reg_344 <= valOutput_2_fu_734_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        valOutput_reg_344 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (or_cond6_reg_990 == 1'd1) & (exitcond4_reg_961 == 1'd0))) begin
        col_assign_1_0_2_reg_1021 <= col_assign_1_0_2_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond4_reg_961 <= exitcond4_fu_445_p2;
        exitcond4_reg_961_pp0_iter1_reg <= exitcond4_reg_961;
        exitcond4_reg_961_pp0_iter2_reg <= exitcond4_reg_961_pp0_iter1_reg;
        or_cond6_reg_990_pp0_iter1_reg <= or_cond6_reg_990;
        or_cond6_reg_990_pp0_iter2_reg <= or_cond6_reg_990_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond4_reg_961 == 1'd0))) begin
        idxCol_1_reg_1051 <= idxCol_1_fu_611_p3;
        pixConvolved_1_reg_1046 <= pixConvolved_1_fu_604_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4_fu_445_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxCol_reg_1001 <= idxCol_fu_558_p2;
        lineBuff_val_1_addr_reg_980 <= tmp_8_fu_457_p1;
        lineBuff_val_2_addr_reg_985 <= tmp_8_fu_457_p1;
        or_cond6_reg_990 <= or_cond6_fu_546_p2;
        tmp_3_reg_995 <= tmp_3_fu_552_p2;
        tmp_8_reg_970[31 : 0] <= tmp_8_fu_457_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4_fu_445_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxRow_1_reg_1006 <= idxRow_1_fu_570_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxpixel_1_reg_965 <= idxpixel_1_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_load_1_reg_846 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_load_2_reg_856 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_load_3_reg_866 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_load_4_reg_876 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        kernel_load_5_reg_886 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        kernel_load_6_reg_896 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_load_7_reg_906 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_load_reg_836 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond6_reg_990 == 1'd1) & (exitcond4_reg_961 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lineBuff_val_1_load_1_reg_1066 <= lineBuff_val_1_q1;
        lineBuff_val_2_load_1_reg_1081 <= lineBuff_val_2_q1;
        lineBuff_val_2_load_2_reg_1086 <= lineBuff_val_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (or_cond6_reg_990_pp0_iter1_reg == 1'd1) & (exitcond4_reg_961_pp0_iter1_reg == 1'd0))) begin
        lineBuff_val_1_load_3_reg_1096 <= lineBuff_val_1_q1;
        tmp13_reg_1116 <= grp_fu_795_p3;
        tmp3_reg_1106 <= grp_fu_802_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        row_1_reg_1164 <= row_1_fu_751_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond6_reg_990_pp0_iter1_reg == 1'd1) & (exitcond4_reg_961_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp14_reg_1141 <= grp_fu_824_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (or_cond6_reg_990_pp0_iter1_reg == 1'd1) & (exitcond4_reg_961_pp0_iter1_reg == 1'd0))) begin
        tmp15_reg_1136 <= grp_fu_810_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (or_cond6_reg_990_pp0_iter1_reg == 1'd1) & (exitcond4_reg_961_pp0_iter1_reg == 1'd0))) begin
        tmp9_reg_1131 <= tmp9_fu_681_p2;
        tmp_12_reg_1126 <= tmp_12_fu_678_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (or_cond6_reg_990_pp0_iter1_reg == 1'd1) & (exitcond4_reg_961_pp0_iter1_reg == 1'd0))) begin
        tmp_13_reg_1111 <= tmp_13_fu_665_p1;
        tmp_17_reg_1121 <= tmp_17_fu_668_p1;
        window_val_2_2_reg_1101 <= window_val_2_2_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond6_reg_990_pp0_iter1_reg == 1'd1) & (exitcond4_reg_961_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_15_reg_1146 <= tmp_15_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond1_fu_745_p2 == 1'd0))) begin
        tmp_21_cast_reg_1169[14 : 7] <= tmp_21_cast_fu_765_p1[14 : 7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_24_0_1_reg_921 <= tmp_24_0_1_fu_420_p1;
        tmp_24_0_2_reg_926 <= tmp_24_0_2_fu_423_p1;
        tmp_24_1_1_reg_936 <= tmp_24_1_1_fu_429_p1;
        tmp_24_1_2_reg_941 <= tmp_24_1_2_fu_432_p1;
        tmp_24_1_reg_931 <= tmp_24_1_fu_426_p1;
        tmp_24_2_1_reg_951 <= tmp_24_2_1_fu_438_p1;
        tmp_24_2_2_reg_956 <= tmp_24_2_2_fu_441_p1;
        tmp_24_2_reg_946 <= tmp_24_2_fu_435_p1;
        tmp_2_reg_916 <= tmp_2_fu_417_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_reg_1156 <= tmp_fu_741_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond6_reg_990 == 1'd1) & (exitcond4_reg_961 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        window_val_0_0_reg_1056 <= window_val_0_0_fu_621_p2;
        window_val_1_1_reg_1071 <= window_val_1_1_fu_636_p2;
    end
end

always @ (*) begin
    if ((exitcond4_fu_445_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond1_fu_745_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4_reg_961 == 1'd0))) begin
        ap_phi_mux_col_assign_phi_fu_383_p4 = idxCol_1_reg_1051;
    end else begin
        ap_phi_mux_col_assign_phi_fu_383_p4 = col_assign_reg_379;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4_reg_961 == 1'd0))) begin
        ap_phi_mux_idxRow_phi_fu_372_p4 = idxRow_1_reg_1006;
    end else begin
        ap_phi_mux_idxRow_phi_fu_372_p4 = idxRow_reg_368;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4_reg_961 == 1'd0))) begin
        ap_phi_mux_idxpixel_phi_fu_337_p4 = idxpixel_1_reg_965;
    end else begin
        ap_phi_mux_idxpixel_phi_fu_337_p4 = idxpixel_reg_333;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond4_reg_961_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_pixConvolved_phi_fu_360_p4 = pixConvolved_1_reg_1046;
    end else begin
        ap_phi_mux_pixConvolved_phi_fu_360_p4 = pixConvolved_reg_356;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond1_fu_745_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_image_ce0 = 1'b1;
    end else begin
        input_image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        kernel_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        kernel_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_address0 = 64'd0;
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuff_val_0_address0 = tmp_20_0_2_fu_626_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        lineBuff_val_0_address0 = tmp_11_fu_578_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lineBuff_val_0_address0 = tmp_8_reg_970;
    end else begin
        lineBuff_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        lineBuff_val_0_ce0 = 1'b1;
    end else begin
        lineBuff_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        lineBuff_val_0_ce1 = 1'b1;
    end else begin
        lineBuff_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond4_reg_961 == 1'd0))) begin
        lineBuff_val_0_we0 = 1'b1;
    end else begin
        lineBuff_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_1_address0 = tmp_20_0_1_fu_591_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuff_val_1_address0 = lineBuff_val_1_addr_reg_980;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_1_address0 = tmp_8_fu_457_p1;
        end else begin
            lineBuff_val_1_address0 = 'bx;
        end
    end else begin
        lineBuff_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuff_val_1_address1 = tmp_20_0_2_fu_626_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        lineBuff_val_1_address1 = tmp_11_fu_578_p1;
    end else begin
        lineBuff_val_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        lineBuff_val_1_ce0 = 1'b1;
    end else begin
        lineBuff_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        lineBuff_val_1_ce1 = 1'b1;
    end else begin
        lineBuff_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond4_reg_961 == 1'd0))) begin
        lineBuff_val_1_we0 = 1'b1;
    end else begin
        lineBuff_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_2_address0 = tmp_20_0_1_fu_591_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuff_val_2_address0 = lineBuff_val_2_addr_reg_985;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_2_address0 = tmp_8_fu_457_p1;
        end else begin
            lineBuff_val_2_address0 = 'bx;
        end
    end else begin
        lineBuff_val_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuff_val_2_address1 = tmp_20_0_2_fu_626_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        lineBuff_val_2_address1 = tmp_11_fu_578_p1;
    end else begin
        lineBuff_val_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        lineBuff_val_2_ce0 = 1'b1;
    end else begin
        lineBuff_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        lineBuff_val_2_ce1 = 1'b1;
    end else begin
        lineBuff_val_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond4_reg_961 == 1'd0))) begin
        lineBuff_val_2_we0 = 1'b1;
    end else begin
        lineBuff_val_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_image_ce0 = 1'b1;
    end else begin
        output_image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond_fu_769_p2 == 1'd0))) begin
        output_image_we0 = 1'b1;
    end else begin
        output_image_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond4_fu_445_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond4_fu_445_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (exitcond1_fu_745_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (exitcond_fu_769_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_334 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond6_reg_990 == 1'd1) & (exitcond4_reg_961 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_353 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (or_cond6_reg_990_pp0_iter1_reg == 1'd1) & (exitcond4_reg_961_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_1_fu_775_p2 = (col_reg_401 + 8'd1);

assign col_assign_1_0_2_fu_598_p2 = (32'd2 + ap_phi_mux_pixConvolved_phi_fu_360_p4);

assign exitcond1_fu_745_p2 = ((row_reg_390 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond4_fu_445_p2 = ((ap_phi_mux_idxpixel_phi_fu_337_p4 == 15'd16384) ? 1'b1 : 1'b0);

assign exitcond_fu_769_p2 = ((col_reg_401 == 8'd128) ? 1'b1 : 1'b0);

assign grp_fu_795_p0 = tmp_24_0_1_reg_921;

assign grp_fu_795_p1 = grp_fu_795_p10;

assign grp_fu_795_p10 = reg_412;

assign grp_fu_802_p0 = tmp_24_2_reg_946;

assign grp_fu_802_p1 = grp_fu_802_p10;

assign grp_fu_802_p10 = lineBuff_val_2_load_1_reg_1081;

assign grp_fu_802_p2 = ($signed(window_val_2_1_fu_651_p0) * $signed({{1'b0}, {window_val_2_1_fu_651_p1}}));

assign grp_fu_810_p0 = tmp_24_0_2_reg_926;

assign grp_fu_810_p1 = grp_fu_810_p10;

assign grp_fu_810_p10 = reg_412;

assign grp_fu_816_p0 = tmp_24_1_2_reg_941;

assign grp_fu_816_p1 = grp_fu_816_p10;

assign grp_fu_816_p10 = lineBuff_val_1_load_3_reg_1096;

assign grp_fu_824_p0 = tmp_24_1_reg_931;

assign grp_fu_824_p1 = grp_fu_824_p10;

assign grp_fu_824_p10 = lineBuff_val_1_load_1_reg_1066;

assign icmp3_fu_516_p2 = (($signed(tmp_10_fu_506_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_500_p2 = (($signed(tmp_9_fu_490_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign idxCol_1_fu_611_p3 = ((tmp_3_reg_995[0:0] === 1'b1) ? idxCol_reg_1001 : 32'd0);

assign idxCol_fu_558_p2 = (32'd1 + ap_phi_mux_col_assign_phi_fu_383_p4);

assign idxRow_1_fu_570_p3 = ((tmp_3_fu_552_p2[0:0] === 1'b1) ? ap_phi_mux_idxRow_phi_fu_372_p4 : idxRow_2_fu_564_p2);

assign idxRow_2_fu_564_p2 = (32'd1 + ap_phi_mux_idxRow_phi_fu_372_p4);

assign idxpixel_1_fu_451_p2 = (ap_phi_mux_idxpixel_phi_fu_337_p4 + 15'd1);

assign input_image_address0 = tmp_15_cast_fu_485_p1;

assign lineBuff_val_0_address1 = tmp_20_0_1_fu_591_p1;

assign or_cond6_fu_546_p2 = (tmp2_fu_540_p2 & tmp1_fu_534_p2);

assign output_image_address0 = tmp_22_cast_fu_790_p1;

assign output_image_d0 = tmp_reg_1156;

assign p_cast_fu_730_p1 = p_s_fu_722_p3;

assign p_s_fu_722_p3 = ((tmp_18_fu_714_p3[0:0] === 1'b1) ? 15'd0 : valOutput_1_cast_fu_709_p2);

assign pixConvolved_1_fu_604_p3 = ((tmp_3_reg_995[0:0] === 1'b1) ? pixConvolved_2_fu_585_p2 : 32'd0);

assign pixConvolved_2_fu_585_p2 = (32'd1 + ap_phi_mux_pixConvolved_phi_fu_360_p4);

assign row_1_fu_751_p2 = (row_reg_390 + 8'd1);

assign tmp12_fu_696_p2 = ($signed(tmp13_reg_1116) + $signed(tmp14_reg_1141));

assign tmp1_fu_534_p2 = (icmp_fu_500_p2 & icmp3_fu_516_p2);

assign tmp2_fu_540_p2 = (tmp_7_fu_528_p2 & tmp_6_fu_522_p2);

assign tmp9_fu_681_p2 = ($signed(tmp3_reg_1106) + $signed(grp_fu_816_p3));

assign tmp_10_cast_fu_781_p1 = col_reg_401;

assign tmp_10_fu_506_p4 = {{ap_phi_mux_col_assign_phi_fu_383_p4[31:1]}};

assign tmp_11_cast_fu_471_p3 = {{tmp_5_fu_467_p1}, {7'd0}};

assign tmp_11_fu_578_p1 = ap_phi_mux_pixConvolved_phi_fu_360_p4;

assign tmp_12_fu_678_p1 = grp_fu_816_p3[14:0];

assign tmp_13_fu_665_p1 = grp_fu_802_p3[14:0];

assign tmp_14_fu_700_p2 = (tmp_12_reg_1126 + tmp_13_reg_1111);

assign tmp_15_cast_fu_485_p1 = $signed(tmp_s_fu_479_p2);

assign tmp_15_fu_691_p2 = (tmp_16_fu_688_p1 + tmp_17_reg_1121);

assign tmp_16_fu_688_p1 = grp_fu_824_p3[14:0];

assign tmp_17_fu_668_p1 = grp_fu_795_p3[14:0];

assign tmp_18_fu_714_p3 = valOutput_1_fu_704_p2[32'd15];

assign tmp_19_fu_757_p3 = {{row_reg_390}, {7'd0}};

assign tmp_20_0_1_fu_591_p1 = pixConvolved_2_fu_585_p2;

assign tmp_20_0_2_fu_626_p1 = col_assign_1_0_2_reg_1021;

assign tmp_20_fu_785_p2 = (tmp_21_cast_reg_1169 + tmp_10_cast_fu_781_p1);

assign tmp_21_cast_fu_765_p1 = tmp_19_fu_757_p3;

assign tmp_22_cast_fu_790_p1 = tmp_20_fu_785_p2;

assign tmp_24_0_1_fu_420_p1 = $signed(kernel_load_1_reg_846);

assign tmp_24_0_2_fu_423_p1 = $signed(kernel_load_2_reg_856);

assign tmp_24_1_1_fu_429_p1 = $signed(kernel_load_4_reg_876);

assign tmp_24_1_2_fu_432_p1 = $signed(kernel_load_5_reg_886);

assign tmp_24_1_fu_426_p1 = $signed(kernel_load_3_reg_866);

assign tmp_24_2_1_fu_438_p1 = $signed(kernel_load_7_reg_906);

assign tmp_24_2_2_fu_441_p1 = $signed(kernel_q0);

assign tmp_24_2_fu_435_p1 = $signed(kernel_load_6_reg_896);

assign tmp_2_fu_417_p1 = $signed(kernel_load_reg_836);

assign tmp_3_fu_552_p2 = (($signed(ap_phi_mux_col_assign_phi_fu_383_p4) < $signed(32'd127)) ? 1'b1 : 1'b0);

assign tmp_4_fu_463_p1 = ap_phi_mux_col_assign_phi_fu_383_p4[15:0];

assign tmp_5_fu_467_p1 = ap_phi_mux_idxRow_phi_fu_372_p4[8:0];

assign tmp_6_fu_522_p2 = (($signed(ap_phi_mux_col_assign_phi_fu_383_p4) < $signed(32'd126)) ? 1'b1 : 1'b0);

assign tmp_7_fu_528_p2 = (($signed(ap_phi_mux_idxRow_phi_fu_372_p4) < $signed(32'd126)) ? 1'b1 : 1'b0);

assign tmp_8_fu_457_p1 = ap_phi_mux_col_assign_phi_fu_383_p4;

assign tmp_9_fu_490_p4 = {{ap_phi_mux_idxRow_phi_fu_372_p4[31:1]}};

assign tmp_fu_741_p1 = valOutput_reg_344[7:0];

assign tmp_s_fu_479_p2 = (tmp_11_cast_fu_471_p3 + tmp_4_fu_463_p1);

assign valOutput_1_cast_fu_709_p2 = (tmp_15_reg_1146 + tmp_14_fu_700_p2);

assign valOutput_1_fu_704_p2 = (tmp9_reg_1131 + tmp12_fu_696_p2);

assign valOutput_2_fu_734_p3 = ((or_cond6_reg_990_pp0_iter2_reg[0:0] === 1'b1) ? p_cast_fu_730_p1 : valOutput_reg_344);

assign window_val_0_0_fu_621_p0 = tmp_2_reg_916;

assign window_val_0_0_fu_621_p1 = window_val_0_0_fu_621_p10;

assign window_val_0_0_fu_621_p10 = lineBuff_val_0_q0;

assign window_val_0_0_fu_621_p2 = ($signed(window_val_0_0_fu_621_p0) * $signed({{1'b0}, {window_val_0_0_fu_621_p1}}));

assign window_val_1_1_fu_636_p0 = tmp_24_1_1_reg_936;

assign window_val_1_1_fu_636_p1 = window_val_1_1_fu_636_p10;

assign window_val_1_1_fu_636_p10 = lineBuff_val_1_q0;

assign window_val_1_1_fu_636_p2 = ($signed(window_val_1_1_fu_636_p0) * $signed({{1'b0}, {window_val_1_1_fu_636_p1}}));

assign window_val_2_1_fu_651_p0 = tmp_24_2_1_reg_951;

assign window_val_2_1_fu_651_p1 = window_val_2_1_fu_651_p10;

assign window_val_2_1_fu_651_p10 = lineBuff_val_2_load_2_reg_1086;

assign window_val_2_2_fu_660_p0 = tmp_24_2_2_reg_956;

assign window_val_2_2_fu_660_p1 = window_val_2_2_fu_660_p10;

assign window_val_2_2_fu_660_p10 = lineBuff_val_2_q1;

assign window_val_2_2_fu_660_p2 = ($signed(window_val_2_2_fu_660_p0) * $signed({{1'b0}, {window_val_2_2_fu_660_p1}}));

always @ (posedge ap_clk) begin
    tmp_8_reg_970[63:32] <= 32'b00000000000000000000000000000000;
    tmp_21_cast_reg_1169[6:0] <= 7'b0000000;
    tmp_21_cast_reg_1169[15] <= 1'b0;
end

endmodule //doConv
